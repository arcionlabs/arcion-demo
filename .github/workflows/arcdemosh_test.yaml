name: Run arcdemo.sh

# Change this to be on push action when it's working?
on: 
  workflow_dispatch:
    # branch:
    inputs:
      SRC_DATABASES: 
        description: 'Which database(s) to use as the source, formatted as a list'
        required: true
        default: '["mysql"]'
        type: string
      DST_DATABASES: 
        description: 'Which database(s) to use as the destination, formatted as a list'
        required: true
        default: '["pg"]'
        type: string
      COMMANDS:
        description: 'Which command(s) to run with the source(s) and destination(s), formatted as a list'
        required: true
        default: '["arcdemo.sh -r 0 snapshot", "arcdemo.sh -r 0 real-time", "arcdemo.sh -r 0 full"]'
        type: string
      RCLONE_CONFIG:
        descriptions: 'rclone config command to run. Necessary parameters will vary based on connection. See https://rclone.org/commands/rclone_config_create/'
        required: true
        default: 'rclone config create myremote storj access_grant=*ACCESS GRANT HERE*'
      REMOTE_NAME:
        description: 'What is the name of the remote access you created in RCLONE_CONFIG?'
        required: true
        default: 'myremote'
      MY_SECRET_NAME:
        description: 'What is the name of the secret that you want to be redacted from the log file?'
        required: false
        default: 'UPLINK_ACC'
      BUCKET_NAME:
        description: 'Name of the bucket to upload to'
        required: true
        default: 'artifact-data'
        type: string

jobs:
  run-demo:
    name: run-arcion-demo
    strategy:
      matrix:
        src: ${{ fromJSON(inputs.SRC_DATABASES) }} #apach-spark, ase, cockroach, db2, informix, kafka, mariadb, minio, mongodb, nfsserver, pg, redis, s2, snowflake, sqledge, yugabyte]
        dest: ${{ fromJSON(inputs.DST_DATABASES) }}
      fail-fast: false
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      MY_SECRET_VAR: ${{secrets[inputs.MY_SECRET_NAME]}}
    steps:
      - uses: actions/checkout@v3
        with:
          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: 'arcionlabs/docker-dev'
      - name: Install and execute
        # Installs and runs the demokit. Later, might be worth it to create compose file w/o 
        # the gui creation.
        run: | 
          export ARCION_LICENSE=${{ secrets.ARC_LIC }}
          docker network create arcnet
          docker volume create oraxe11g >/tmp/install.$$ 2>&1
          docker volume create oraxe2130 >/tmp/install.$$ 2>&1
          docker volume create oraee1930 >/tmp/install.$$ 2>&1
          docker volume create arcion-bin >/tmp/install.$$ 2>&1
          cd ${{ matrix.src }}
          docker compose up -d
          cd ../${{ matrix.dest }}
          docker compose up -d
          cd ..
          docker compose -f arcion-demo/docker-compose.yaml pull
          docker compose -f arcion-demo/docker-compose.yaml up -d
          sleep 40
          docker exec workloads mkdir -p /opt/stage/data
          echo "Made it to execution"
          IFS=$'\n'
          for command in $(echo '${{ inputs.COMMANDS }}' | jq -r '.[]' ); do
            set -- docker exec workloads
            IFS=$' '
            for param in $command; do
              set -- "$@" $param
            done
            set -- "$@" ${{ matrix.src }} ${{ matrix.dest }}
            "$@"
            IFS=$'\n'
          done
          IFS=$' '
      - name: Extract files
        if: '!cancelled()'
        run: |
          mkdir artifact_data
          cd artifact_data
          for f in $(docker exec workloads ls /opt/stage/data | grep -v README.md); do docker exec workloads tar Ccf $(dirname /opt/stage/data/$f) - $(basename /opt/stage/data/$f) | tar Cxf . -; echo $f; done
          cd ..
      - name: Upload to central storage
        if: '!cancelled()'
        run: |
          sudo -v ; curl https://rclone.org/install.sh | sudo bash
          ${{ inputs.RCLONE_CONFIG }}
          rclone copy artifact_data ${{ inputs.REMOTE_NAME }}:${{ inputs.BUCKET_NAME }}