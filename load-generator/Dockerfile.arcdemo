FROM ubuntu:22.04
LABEL MAINTAINER sangkyulee@gmail.com

# Test image locally
#   cd arcion-demo
#   docker build -t robertslee/arcdemo -f load-generator/Dockerfile.arcdemo .
# Publish amd64, arm64  
#   docker buildx create --name mybuilder
#   docker buildx use mybuilder
#   docker buildx inspect --bootstrap
#   docker buildx build --push --platform=linux/amd64,linux/arm64/v8 -t robertslee/arcdemo -f load-generator/Dockerfile.arcdemo .
# To start a container 
#     docker run -it --rm -p 7681:7681 robertslee/arcdemo
# To push to docker hub
#     docker tag 597de83199f4 robertslee/arcdemo
#     docker push robertslee/arcdemo

ENV ARCION_HOME=/arcion
ENV VERIFICATOR_HOME=/arcion_verificator
ENV SCRIPTS_DIR=/scripts
ENV MARIADB_DIR=/opt/mariadb
ENV MYSQL_DIR=/opt/mysql
ENV JSQSH_DIR=/opt/jsqsh
ENV MINIO_DIR=/opt/minio

# YCSB version
ENV YCSB_VERSION=0.17.0 \
    YCSB_BINDING="mongodb-binding jdbc-binding" \
    PATH=${PATH}:/usr/bin
ENV YCSB=/opt/ycsb

# ********************************************************
# setup user account copy / paste from 
# https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user
# ********************************************************

ARG USERNAME=arcion
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --shell /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# ********************************************************
# regular user installation
# ********************************************************

# fix sysbench 
RUN echo "deb [trusted=yes] http://deb.debian.org/debian bullseye-backports main" >> /etc/apt/sources.list.d/debian.bullseye-backports.main.list

# Java 8 
RUN apt-get update && apt-get install -y curl openjdk-8-jre && java -version

# add pg, mysql, postgres
RUN DEBIAN_FRONTEND=noninteractive TZ="America/New_York" apt-get install -y tzdata mysql-client postgresql-client postgresql postgresql-contrib

# add sysbench 
RUN apt-get -y install sysbench

# add ttyd for running terminal commands
RUN apt-get -y install tmux sysvbanner vim dstat gettext net-tools nmap bfs
# get TTYD from bullseye-backports main
RUN apt-get -y install ttyd

# mongodb support
RUN apt-get -y install wget && \
    apt-get -y install gnupg && \
    wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add - && \
    echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list && \
    apt-get update && \
    apt-get install -y mongodb-mongosh
    
# add YCSB with just JDBC binding
RUN mkdir -p $YCSB && chown $USERNAME $YCSB
RUN mkdir -p $ARCION_HOME && chown $USERNAME $ARCION_HOME
RUN mkdir -p $VERIFICATOR_HOME && chown $USERNAME $VERIFICATOR_HOME
RUN mkdir -p $SCRIPTS_DIR && chown $USERNAME $SCRIPTS_DIR
RUN mkdir -p $MARIADB_DIR && chown $USERNAME $MARIADB_DIR
RUN mkdir -p $MYSQL_DIR && chown $USERNAME $MYSQL_DIR
RUN mkdir -p $MINIO_DIR && chown $USERNAME $MINIO_DIR
RUN mkdir -p $JSQSH_DIR && chown $USERNAME $JSQSH_DIR

# run as regular user beyond this point
USER $USERNAME

# download ycsb
COPY --chown=${USERNAME} scripts/utils/setenv.sh $YCSB/. 
RUN cd $YCSB; for b in ${YCSB_BINDING}; do curl -O --location https://github.com/brianfrankcooper/YCSB/releases/download/${YCSB_VERSION}/ycsb-${b}-${YCSB_VERSION}.tar.gz; tar xfz ycsb-${b}-${YCSB_VERSION}.tar.gz; cp setenv.sh ycsb-${b}-${YCSB_VERSION}/bin; rm ycsb-${b}-${YCSB_VERSION}.tar.gz; done
     
# download mariadb 
RUN cd ${MARIADB_DIR} \
    && apt-get download mariadb-server-10.6 \
    && ls *.deb | xargs -I % dpkg -x % .  

# download mysql 
RUN cd ${MYSQL_DIR} \
    && apt-get download mysql-server-core-8.0 \
    && ls *.deb | xargs -I % dpkg -x % .  

# download jsqsj
RUN cd ${JSQSH_DIR} \
    && wget https://github.com/scgray/jsqsh/releases/download/jsqsh-2.3/jsqsh-2.3-bin.tar.gz \
    && gzip -dc jsqsh* | tar -xvf - \
    && rm *.tar.gz

# /usr/share/sysbench/oltp_common.lua
# modify to add ts so that delta snap can work
COPY  scripts/utils/oltp_common.lua /usr/share/sysbench/. 

# download minio client
# TARGETARCH=$(arch | sed s/aarch64/arm64/ | sed s/x86_64/amd64/)
RUN cd $MINIO_DIR; curl https://dl.min.io/client/mc/release/linux-${TARGETARCH}/mc \
  --create-dirs \
  -o mc && \
  chmod a+x mc

EXPOSE 7681

# arcion binary
COPY --chown=${USERNAME} replicant-cli/ ${ARCION_HOME}
COPY --chown=${USERNAME} replicate-row-verificator/ ${VERIFICATOR_HOME}
# TODO: maybe separate scripts which will be changing often
COPY --chown=${USERNAME} scripts/ /scripts/

# jsqsh
RUN mkdir ~/.jsqsh
COPY --chown=${USERNAME} scripts/utils/drivers.xml ~/.jsqsh/

WORKDIR /scripts

ENV CLASSPATH=/arcion/lib/db2jcc-db2jcc4.jar:/arcion/lib/jconn4-1.6.0_03.jar:/arcion/lib/mariadb-java-client-2.7.3.jar:/arcion/lib/mongodb-driver-core-3.10.2.jar:/arcion/lib/mongodb-driver-sync-3.10.2.jar:/arcion/lib/mssql-jdbc-8.2.0.jre8.jar:/arcion/lib/orai18n-21.5.0.0.jar:/arcion/lib/postgresql-42.3.5.jar

CMD /scripts/utils/arclic.sh; ttyd /scripts/utils/tmux.sh 